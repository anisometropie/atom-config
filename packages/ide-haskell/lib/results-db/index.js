"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const result_item_1 = require("./result-item");
exports.ResultItem = result_item_1.ResultItem;
const atom_1 = require("atom");
const provider_1 = require("./provider");
const utils_1 = require("../utils");
class ResultsDB {
    constructor() {
        this.currentId = 0;
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.messages = new Map();
    }
    destroy() {
        this.disposables.dispose();
    }
    onDidUpdate(callback) {
        return this.emitter.on('did-update', callback);
    }
    didUpdate(providerId, providerSeverities, msgs) {
        const uris = msgs.map((v) => v.uri).filter(utils_1.notUndefined);
        for (const [k, v] of Array.from(this.messages)) {
            if (v.providerId === providerId ||
                (uris.includes(v.uri) && providerSeverities.includes(v.severity))) {
                this.messages.delete(k);
            }
        }
        for (const msg of msgs) {
            this.messages.set(msg.hash(), msg);
        }
        const severities = new Set(msgs.map((v) => v.severity));
        this.emitter.emit('did-update', Array.from(severities));
    }
    registerProvider(providerSeverities) {
        const p = new provider_1.Provider(this, new Set(providerSeverities), ++this.currentId);
        this.disposables.add(p);
        return p;
    }
    results() {
        return this.messages.values();
    }
    *filter(f) {
        for (const v of this.results()) {
            if (f(v)) {
                yield v;
            }
        }
    }
    isEmpty(severities) {
        return !Array.from(this.messages.values()).some(({ severity }) => severities.includes(severity));
    }
}
exports.ResultsDB = ResultsDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVzdWx0cy1kYi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUEwQztBQU1QLHFCQU4xQix3QkFBVSxDQU0wQjtBQUw3QywrQkFBbUQ7QUFDbkQseUNBQStEO0FBQy9ELG9DQUF1QztBQU92QztJQVVFO1FBQ0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUE7UUFDbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7UUFDNUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGNBQU8sRUFBRSxDQUFBO1FBQzVCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7SUFDM0IsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzVCLENBQUM7SUFFTSxXQUFXLENBQUMsUUFBeUI7UUFDMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNoRCxDQUFDO0lBRU0sU0FBUyxDQUNkLFVBQWtCLEVBQ2xCLGtCQUFtQyxFQUNuQyxJQUFrQjtRQUVsQixNQUFNLElBQUksR0FBYSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLG9CQUFZLENBQUMsQ0FBQTtRQUNsRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQyxFQUFFLENBQUMsQ0FDRCxDQUFDLENBQUMsVUFBVSxLQUFLLFVBQVU7Z0JBQzNCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBSSxDQUFDLElBQUksa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FDbkUsQ0FBQyxDQUFDLENBQUM7Z0JBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDekIsQ0FBQztRQUNILENBQUM7UUFDRCxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUNwQyxDQUFDO1FBQ0QsTUFBTSxVQUFVLEdBQXVCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBO1FBQzNFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7SUFDekQsQ0FBQztJQUVNLGdCQUFnQixDQUFDLGtCQUFtQztRQUN6RCxNQUFNLENBQUMsR0FBRyxJQUFJLG1CQUFRLENBQUMsSUFBSSxFQUFFLElBQUksR0FBRyxDQUFDLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDM0UsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDdkIsTUFBTSxDQUFDLENBQUMsQ0FBQTtJQUNWLENBQUM7SUFFTSxPQUFPO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUE7SUFDL0IsQ0FBQztJQUVNLENBQUMsTUFBTSxDQUFDLENBQWdDO1FBQzdDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDL0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDVCxNQUFNLENBQUMsQ0FBQTtZQUNULENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVNLE9BQU8sQ0FBQyxVQUEyQjtRQUN4QyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FDL0QsVUFBVSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FDOUIsQ0FBQTtJQUNILENBQUM7Q0FDRjtBQXRFRCw4QkFzRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXN1bHRJdGVtIH0gZnJvbSAnLi9yZXN1bHQtaXRlbSdcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIEVtaXR0ZXIgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHsgUHJvdmlkZXIsIFRNZXNzYWdlUHJvdmlkZXJGdW5jdGlvbiB9IGZyb20gJy4vcHJvdmlkZXInXG5pbXBvcnQgeyBub3RVbmRlZmluZWQgfSBmcm9tICcuLi91dGlscydcbmltcG9ydCAqIGFzIFVQSSBmcm9tICdhdG9tLWhhc2tlbGwtdXBpJ1xuXG5leHBvcnQgeyBUTWVzc2FnZVByb3ZpZGVyRnVuY3Rpb24sIFJlc3VsdEl0ZW0gfVxuXG5leHBvcnQgdHlwZSBUVXBkYXRlQ2FsbGJhY2sgPSAoc2V2ZXJpdGllczogVVBJLlRTZXZlcml0eVtdKSA9PiB2b2lkXG5cbmV4cG9ydCBjbGFzcyBSZXN1bHRzREIge1xuICBwcml2YXRlIGN1cnJlbnRJZDogbnVtYmVyXG4gIHByaXZhdGUgbWVzc2FnZXM6IE1hcDxzdHJpbmcsIFJlc3VsdEl0ZW0+XG4gIHByaXZhdGUgZGlzcG9zYWJsZXM6IENvbXBvc2l0ZURpc3Bvc2FibGVcbiAgcHJpdmF0ZSBlbWl0dGVyOiBFbWl0dGVyPFxuICAgIHt9LFxuICAgIHtcbiAgICAgICdkaWQtdXBkYXRlJzogVVBJLlRTZXZlcml0eVtdXG4gICAgfVxuICA+XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY3VycmVudElkID0gMFxuICAgIHRoaXMuZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKHRoaXMuZW1pdHRlcilcbiAgICB0aGlzLm1lc3NhZ2VzID0gbmV3IE1hcCgpXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuICB9XG5cbiAgcHVibGljIG9uRGlkVXBkYXRlKGNhbGxiYWNrOiBUVXBkYXRlQ2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdkaWQtdXBkYXRlJywgY2FsbGJhY2spXG4gIH1cblxuICBwdWJsaWMgZGlkVXBkYXRlKFxuICAgIHByb3ZpZGVySWQ6IG51bWJlcixcbiAgICBwcm92aWRlclNldmVyaXRpZXM6IFVQSS5UU2V2ZXJpdHlbXSxcbiAgICBtc2dzOiBSZXN1bHRJdGVtW10sXG4gICkge1xuICAgIGNvbnN0IHVyaXM6IHN0cmluZ1tdID0gbXNncy5tYXAoKHYpID0+IHYudXJpKS5maWx0ZXIobm90VW5kZWZpbmVkKVxuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIEFycmF5LmZyb20odGhpcy5tZXNzYWdlcykpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdi5wcm92aWRlcklkID09PSBwcm92aWRlcklkIHx8XG4gICAgICAgICh1cmlzLmluY2x1ZGVzKHYudXJpISkgJiYgcHJvdmlkZXJTZXZlcml0aWVzLmluY2x1ZGVzKHYuc2V2ZXJpdHkpKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMubWVzc2FnZXMuZGVsZXRlKGspXG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgbXNnIG9mIG1zZ3MpIHtcbiAgICAgIHRoaXMubWVzc2FnZXMuc2V0KG1zZy5oYXNoKCksIG1zZylcbiAgICB9XG4gICAgY29uc3Qgc2V2ZXJpdGllczogU2V0PFVQSS5UU2V2ZXJpdHk+ID0gbmV3IFNldChtc2dzLm1hcCgodikgPT4gdi5zZXZlcml0eSkpXG4gICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2RpZC11cGRhdGUnLCBBcnJheS5mcm9tKHNldmVyaXRpZXMpKVxuICB9XG5cbiAgcHVibGljIHJlZ2lzdGVyUHJvdmlkZXIocHJvdmlkZXJTZXZlcml0aWVzOiBVUEkuVFNldmVyaXR5W10pIHtcbiAgICBjb25zdCBwID0gbmV3IFByb3ZpZGVyKHRoaXMsIG5ldyBTZXQocHJvdmlkZXJTZXZlcml0aWVzKSwgKyt0aGlzLmN1cnJlbnRJZClcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZChwKVxuICAgIHJldHVybiBwXG4gIH1cblxuICBwdWJsaWMgcmVzdWx0cygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlcy52YWx1ZXMoKVxuICB9XG5cbiAgcHVibGljICpmaWx0ZXIoZjogKGl0ZW06IFJlc3VsdEl0ZW0pID0+IGJvb2xlYW4pIHtcbiAgICBmb3IgKGNvbnN0IHYgb2YgdGhpcy5yZXN1bHRzKCkpIHtcbiAgICAgIGlmIChmKHYpKSB7XG4gICAgICAgIHlpZWxkIHZcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaXNFbXB0eShzZXZlcml0aWVzOiBVUEkuVFNldmVyaXR5W10pIHtcbiAgICByZXR1cm4gIUFycmF5LmZyb20odGhpcy5tZXNzYWdlcy52YWx1ZXMoKSkuc29tZSgoeyBzZXZlcml0eSB9KSA9PlxuICAgICAgc2V2ZXJpdGllcy5pbmNsdWRlcyhzZXZlcml0eSksXG4gICAgKVxuICB9XG59XG4iXX0=